=> Enviroment
    (i) Text Editor
    (ii) Integrated Development Enviroment (IDE)

=> Who Use Python
    1. Software Developers
            Backend Development , web applications (eg. Django , Flask )
    2. Data Scientists and Analysts
            Data analysis, data visualization and statistical modeling
    3. AI ( Artificial Intelligence ) and ML (Machine Learning)
            TensorFlow,Pytorch,Keras
    4. Engineers
            automation,simulations , ( eg. Raspberry Pi)
    5. Cybersecurity
            creating custom security tools
    6. Game Developers
            Pygame


=> What is programming
1. Creating Algorithms
    sorting to number and datas
2. Writing Code
    Programmer have to code (Python,Java,C++,etc...)
3. Compiling or Interpreting Code
        Compiler : All Code in one time
        Interpreter : Code in one line
4. Problem-Solving
5. Debugging
    Bug
6. Testing
    Test Program
7. Creating Software Applications
    Create Software (Web App, Mobile App, Desktop App)
8. Automation
    Repetitive Process
9. Building User Interface (UI)
10. Maintaining and Optimizing




=> What is Programmer
1. Writing Code
2. Creating Software Applications
     Web Development
     Mobile Development
     Game Development
     Data Science
     Cybersecurity
3. Problem Solving
4. Testing and Debugging
5. Optimizing Code
6. Collaboration
    Developers,Designer,Project Manager
7. Maintaining Software



=> What is Programming Language
1. Syntax
2. Instruction
3. Data Types
4. Compilers and Interpreters
    Compilers Languages : (C,C++,Go(Goland).etc)
    Interpreters Languages : Python,Javascript,PHP
5. Variables and Functions
6. Hight-Level or Low-Level Language
    Hight-Level Language (Python,Java,etc...)
    Low-Level Language (Assembly,Maching Code)


Hight-Level Language
Assembly Code
Machine Language
Hardware


=> Why HTML is not programming language ?
    HyperText Markup Language
        No Logic,Data Manipulation , Computation
    1.  No Logic and Control Stractures
    2.  Description
    3.  Variables and Functions
    4.  Static Content
    5.  either Compiler nor Interpreter


=> Why CSS is not programming language ?
    Cascading Style Sheets
        either Compiler nor Interpreter
        SSL (Style Sheet Language) or SPL (Static Presentation Language)
        Not Logic-based Language so can't computation


=> Javascript
    Interpreter
        Browser
    JIT (Just-in-Time) Compilation


=> Markup Language vs Programming Language
    Markup = Description
    Programming = order



=> Compiler vs Interpreter

    ( Compiler = Source Code to Machine Code )
    = 1. program.go

        import "fmt"

        func myfun(){
            fmt.printIn("Hello Aung Aung");
        }

    = 2. Compiling
        go build -o program program.go

    = 3. Linking 
        Go Runtime , Libraries, Dependency Files, Binary Files

    = 4. Execution(Machine Code)


=>  Interpreter
        Python source code -> byte code (.pyc format) -> Interpretered line by line (Python Virtual Machine (PVM))


=> How Python Code Work ?
    Interpreted Language
    compilation and interpretation , are both included


    1. Python source code (.py)
        print("Hello Aung Aung")
    2. Interpretation   
    3. byte code (.pyc format)
        Bytecode is Platform-independent
        PVM -> CPU -> run
    4. Just-in-Time(JIT) Compilation












    => Python install on Linux

    download python latest version from python website and you will get tar.xz zip file

    tar -xvf Python-3.12.6.tar.xz
    cd Python-3.12.6
    ./configure
    make
    sudo make install
